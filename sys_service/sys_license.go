// ================================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// You can delete these comments if you wish manually maintain this interface file.
// ================================================================================

package sys_service

import (
	"context"

	"github.com/SupenBysz/gf-admin-community/sys_model"
	"github.com/SupenBysz/gf-admin-community/sys_model/sys_entity"
)

type (
	ISysLicense interface {
		GetLicenseById(ctx context.Context, id int64) (*sys_entity.SysLicense, error)
		QueryLicenseList(ctx context.Context, search sys_model.SearchParams) (*sys_model.LicenseListRes, error)
		CreateLicense(ctx context.Context, info sys_model.License) (*sys_entity.SysLicense, error)
		UpdateLicense(ctx context.Context, info sys_model.License, id int64) (*sys_entity.SysLicense, error)
		SetLicenseState(ctx context.Context, id int64, state int) (bool, error)
		SetLicenseAuditNumber(ctx context.Context, id int64, auditNumber string) (bool, error)
		DeleteLicense(ctx context.Context, id int64, flag bool) (bool, error)
		UpdateLicenseAuditLogId(ctx context.Context, id int64, latestAuditLogId int64) (bool, error)
		Masker(license *sys_entity.SysLicense) *sys_entity.SysLicense
	}
)

var (
	localSysLicense ISysLicense
)

func SysLicense() ISysLicense {
	if localSysLicense == nil {
		panic("implement not found for interface ISysLicense, forgot register?")
	}
	return localSysLicense
}

func RegisterSysLicense(i ISysLicense) {
	localSysLicense = i
}
