// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package sys_dao

import (
	"context"
	"time"

	"github.com/SupenBysz/gf-admin-community/sys_consts"
	"github.com/SupenBysz/gf-admin-community/sys_model/sys_dao/internal"
	"github.com/gogf/gf/v2/database/gdb"
)

// internalSysUserDetailDao is internal type for wrapping internal DAO implements.
type internalSysUserDetailDao = *internal.SysUserDetailDao

// sysUserDetailDao is the data access object for table sys_user_detail.
// You can define custom methods on it to extend its functionality as you wish.
type sysUserDetailDao struct {
	internalSysUserDetailDao
}

var (
	// SysUserDetail is globally public accessible object for table sys_user_detail operations.
	SysUserDetail = sysUserDetailDao{
		internal.NewSysUserDetailDao(),
	}
)

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *sysUserDetailDao) Ctx(ctx context.Context, cacheOption ...gdb.CacheOption) *gdb.Model {
	conf := gdb.CacheOption{
		Duration: time.Hour * 24,
		Force:    false,
	}

	if len(cacheOption) == 0 {
		for _, cacheConf := range sys_consts.Global.OrmCacheConf {
			if cacheConf.TableName == dao.Table() {
				conf.Duration = time.Second * (time.Duration)(cacheConf.ExpireSeconds)
				conf.Force = cacheConf.Force
			}
		}
	} else {
		conf = cacheOption[0]
	}

	return dao.DB().Model(dao.Table()).Safe().Ctx(ctx).Cache(conf)
}
